// https://github.com/Erkaman/vulkan_minimal_compute

#version 450
#extension GL_ARB_separate_shader_objects : enable

struct Star {
  vec3 pos;
  float id;
  vec3 vel;
  float mass;
};

layout(binding = 0, std140) buffer buf {
   Star stars[];
};

layout(binding = 1) uniform ub {
  uint count;
  uint width;
  uint height;
};

void main() {
  //terminate unnecessary threads
  if(gl_GlobalInvocationID.x >= count)
    return;

  //float x = float(gl_GlobalInvocationID.x) / float(COUNT);
  
  int index = int(gl_GlobalInvocationID.x);
  Star star1 = stars[index];

  
  for (int i = index + 1; i < count; i++){
    Star star2 = stars[i];

    vec3 dist = star1.pos - star2.pos;

    float distSum = abs(dist.x) + abs(dist.y) + abs(dist.z);
    float distAbs = sqrt(dist.x * dist.x + dist.y * dist.y + dist.z * dist.z);

    /*
    if (distAbs < 20){
      stars[index].mass += stars[i].mass;
      stars[i].mass = 0.01;
    }
    */

    vec3 fv = dist / distSum;

    float fg = star1.mass * star2.mass / distAbs;
    float a1 = fg / star1.mass;
    float a2 = fg / star2.mass;

    stars[index].vel -= fv * a1 ;
    stars[i].vel += fv * a2;
  }

  if (index == count - 1){
    for (int i = 0; i < count; i++){
      stars[i].pos += stars[i].vel * 0.5;
      stars[i].id = i;
    }
  }
  //stars[index].vel = vec3(2,4,2);
  //stars[index].mass = 9.;
  // store the rendered mandelbrot set into a storage buffer:
  //imageData[COUNT * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].value = color;
}

void collision(inout uint f){

}