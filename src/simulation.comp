#version 450
#extension GL_ARB_separate_shader_objects : enable

struct Star {
  vec3 pos;
  float empety;
  vec3 vel;
  float mass;
};

layout(binding = 0, std140) buffer buf {
   Star stars[];
};

layout(binding = 1) uniform ub {
  uint count;
};

void interaction() {
  float groupCount = gl_NumWorkGroups.x;
  float groupIndex = gl_GlobalInvocationID.x;
  float groupInvIndex = groupCount - groupIndex;

  float smothFactor = 0.5 + (1 - ((10 / groupCount))) / 10;
  float groupScaleBegin = (1 / (groupInvIndex + 1)) * smothFactor + smothFactor;
  float groupScaleEnd = (1 / (groupInvIndex)) * smothFactor + smothFactor;

  float groupSize = count / groupCount * 1.5;

  int begin = int(groupIndex * groupSize * groupScaleBegin);
  int end = int((groupIndex + 1) * groupSize * groupScaleEnd);

  for (int i1 = begin; i1 < end; i1++){
    Star star1 = stars[i1];

    for (int i2 = i1+1; i2 < count; i2++){
      Star star2 = stars[i2];

      vec3 dist = star1.pos - star2.pos;
      
      float distSum = abs(dist.x) + abs(dist.y) + abs(dist.z);
      float distAbs = sqrt(dist.x * dist.x + dist.y * dist.y + dist.z * dist.z);

      vec3 forceProportion = dist / distSum;

      float attraction = star1.mass * star2.mass / distAbs;
      float attraction1 = attraction / star1.mass;
      float attraction2 = attraction / star2.mass;

      stars[i1].vel -= forceProportion * attraction1 ;
      stars[i2].vel += forceProportion * attraction2 ;
    }
  }
}

void integration() {
  float groupIndex = gl_GlobalInvocationID.x;
  float groupSize = count / float(gl_NumWorkGroups.x);

  int begin = int(groupIndex * groupSize);
  int end = int((groupIndex + 1) * groupSize);

  for (int i = begin; i < end; i++){
    stars[i].pos += stars[i].vel * 1e-6;
  }
}

