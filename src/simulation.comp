#version 450
#extension GL_ARB_separate_shader_objects : enable

struct Star {
  vec3 pos;
  float id;
  vec3 vel;
  float mass;
};

layout(binding = 0, std140) buffer buf {
   Star stars[];
};

layout(binding = 1) uniform ub {
  uint count;
};

void main() {
  float groupIndex = gl_GlobalInvocationID.x;
  float groupSize = count / float(gl_NumWorkGroups.x);

  int begin = int(groupIndex * groupSize);
  int end = int((groupIndex + 1) * groupSize);

  for (int i1 = begin; i1 < end; i1++){
    Star star1 = stars[i1];

    for (int i2 = 0; i2 < count; i2++){
      if (i1 == i2) continue;

      Star star2 = stars[i2];

vec3 r = p2.xyz - p1.xyz;
  float dist_sqr = dot(r,r) + EPS2;
  float dist_sixth = dist_sqr*dist_sqr*dist_sqr;
  float inv_dist_cube = inversesqrt(dist_sixth);
  return r*inv_dist_cube;
  
      vec3 dist = star1.pos - star2.pos;
      
      float distSum = abs(dist.x) + abs(dist.y) + abs(dist.z);
      float distAbs = sqrt(dist.x * dist.x + dist.y * dist.y + dist.z * dist.z);

      /*
      if (distAbs < 20) {
        stars[index].mass += stars[i].mass;
        stars[i].mass = 0.01;
      }
      */
      
      vec3 fv = dist / distSum;

      float fg = star1.mass * star2.mass / distAbs;
      float a1 = fg / star1.mass;
      float a2 = fg / star2.mass;

      stars[i1].vel -= fv * a1;
      //stars[i2].vel += fv * a2;
    }
  }
}

void apply() {
  float groupIndex = gl_GlobalInvocationID.x;
  float groupSize = count / float(gl_NumWorkGroups.x);

  int begin = int(groupIndex * groupSize);
  int end = int((groupIndex + 1) * groupSize);

  for (int i = begin; i < end; i++){
    stars[i].pos += stars[i].vel * 1e-6;
    stars[i].id = i;
  }
}

